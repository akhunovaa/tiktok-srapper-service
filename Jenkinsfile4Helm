pipeline {

    environment {
        dockerImageName = "botmasterzzz-tiktok-srapper-service"
        registryUrl = "https://registry.yourapi.ru"
        registry = "registry.yourapi.ru/${dockerImageName}"
        registryCredential = "ourHubPwd"
        remoteHost = "5.189.146.63"
        helmFilesDirectoryName = "helm/botmasterzzz-tiktok-srapper-service"
        remoteWorkSpace = "/home/jenkins/workspace"
        KUBECONFIG = "/home/jenkins/.kube/config"
        dockerImageTag = "${env.DOCKER_IMAGE_TAG}"
        replicaCount = "${env.REPLICA_COUNT}"
    }

    agent any

    stages {

        stage('Checkout') {
            steps {
                echo 'Checkout'
            }
        }

        stage('NPM TS-Node Install') {
            steps {
                echo 'Installing dependencies'
                nodejs('Node 10.15.0 LTS') {
                    sh 'npm install -g ts-node'
                }
            }
        }

        stage('NPM Dependencies Install') {
            steps {
                echo 'Installing dependencies'
                nodejs('Node 10.15.0 LTS') {
                    sh 'npm install -D @types/progress'
                }
            }
        }

        stage('Pre-Build') {
            steps {
                echo 'Pre-Building'
                nodejs('Node 10.15.0 LTS') {
                    sh 'npm run-script prebuild'
                }
            }
        }


        stage('Build') {
            steps {
                echo 'Building npm'
                nodejs('Node 10.15.0 LTS') {
                    sh 'npm run-script build'
                }
            }
        }

        stage('Pre-Start') {
            steps {
                echo 'Pre-starting'
                nodejs('Node 10.15.0 LTS') {
                    sh 'npm run-script prestart'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                echo "Building image: $registry:$BUILD_NUMBER"
                script {
                    dockerImage = docker.build registry + ":$BUILD_NUMBER"
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                echo "Pushing image: $registry:$BUILD_NUMBER"
                script {
                    docker.withRegistry(registryUrl, registryCredential) {
                        dockerImage.push()
                    }

                }
            }
        }

        stage('Remove Unused Docker Image') {
            steps {
                echo "Removing image: $registry:$BUILD_NUMBER"
                sh "docker rmi $registry:$BUILD_NUMBER"
            }
        }

        stage('Copy Helm Files To Remote Host') {
            steps {
                sshagent(credentials: ['second']) {
                    echo "Compressing helm files"
                    sh "tar -czvf $dockerImageName-$BUILD_NUMBER-.tar.gz $helmFilesDirectoryName"
                    echo "Copying compressed helm files $dockerImageName-$BUILD_NUMBER-.tar.gz to the remote server root@$remoteHost"
                    sh "scp $dockerImageName-$BUILD_NUMBER-.tar.gz root@$remoteHost:$remoteWorkSpace"
                    echo "Uncompressing remote helm files $dockerImageName-$BUILD_NUMBER-.tar.gz on remote host root@$remoteHost"
                    sh "ssh root@$remoteHost mkdir $remoteWorkSpace/$dockerImageName-$BUILD_NUMBER"
                    sh "ssh root@$remoteHost tar -xzvf $remoteWorkSpace/$dockerImageName-$BUILD_NUMBER-.tar.gz -C $remoteWorkSpace/$dockerImageName-$BUILD_NUMBER"
                    echo "Deleting remote compressed helm files $dockerImageName-$BUILD_NUMBER-.tar.gz on remote host root@$remoteHost"
                    sh "ssh root@$remoteHost rm -rf $remoteWorkSpace/$dockerImageName-$BUILD_NUMBER-.tar.gz"
                }
            }
        }

        stage('Helm Install') {
            steps {
                sshagent(credentials: ['second']) {
                    echo "Removing remote pre-build image: $registry:${currentBuild.previousBuild.getNumber()}"
                    sh "ssh root@$remoteHost docker rmi --force $registry:${currentBuild.previousBuild.getNumber()}"
                    echo "Installing via Helm an image: $registry via helm files from directory $remoteWorkSpace/$dockerImageName-$BUILD_NUMBER"
                    sh "ssh root@$remoteHost helm upgrade --install $dockerImageName $remoteWorkSpace/$dockerImageName-$BUILD_NUMBER/$helmFilesDirectoryName --set replicaCount=$replicaCount --set image.appVersion=$dockerImageTag --namespace dev"
                }
                sh 'printenv'
            }
        }
    }
}