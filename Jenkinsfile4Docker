pipeline {

    environment {
        dockerImageName = "botmasterzzz-tiktok-srapper-service"
        registryUrl = "https://registry.yourapi.ru""
        registry = "registry.yourapi.ru/${dockerImageName}"
        registryCredential = "ourHubPwd"
        dockerExternalPort = "127.0.0.1:7321"
        dockerInternalPort = "7321"
    }

    agent any

    stages {

              stage('Checkout') {
                  steps {
                      echo 'Checkout'
                  }
              }

              stage('NPM Dependencies Install') {
                  steps {
                      echo 'Installing dependencies'
                      nodejs('Node 10.15.0 LTS') {
                          sh 'npm install -D @types/progress'
                      }
                  }
              }

              stage('Pre-Build') {
                  steps {
                      echo 'Pre-Building'
                      nodejs('Node 10.15.0 LTS') {
                          sh 'npm run-script prebuild'
                      }
                  }
              }


              stage('Build') {
                  steps {
                      echo 'Building npm'
                      nodejs('Node 10.15.0 LTS') {
                          sh 'npm run-script build'
                      }
                  }
              }

              stage('Pre-Start') {
                  steps {
                      echo 'Pre-starting'
                      nodejs('Node 10.15.0 LTS') {
                          sh 'npm run-script prestart'
                      }
                  }
              }

        stage('Build Docker Image') {
            steps {
                echo "Building image: $registry:$BUILD_NUMBER"
                script {
                    dockerImage = docker.build registry + ":$BUILD_NUMBER"
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                echo "Pushing image: $registry:$BUILD_NUMBER"
                script {
                    docker.withRegistry(registryUrl, registryCredential) {
                        dockerImage.push()
                    }

                }
            }
        }

        stage('Remove Unused Docker Image') {
            steps {
                echo "Removing image: $registry:$BUILD_NUMBER"
                sh "docker rmi $registry:$BUILD_NUMBER"
            }
        }

        stage('Deploy') {
            steps {
                echo '## Deploy locally ##'
                echo "Stopping docker container: $dockerImageName"
                sh "docker container ls -a -f name=$dockerImageName -q | xargs --no-run-if-empty docker container stop"
                echo "Removing docker container: $dockerImageName"
                sh "docker container ls -a -f name=$dockerImageName -q | xargs -r docker container rm"
                echo "Running docker image: $registry:$BUILD_NUMBER"
                script {
                    docker.withRegistry(registryUrl, registryCredential) {
                        sh "docker run -v /etc/localtime:/etc/localtime --name $dockerImageName -d --net=botmasterzzznetwork -p $dockerExternalPort:$dockerInternalPort --restart always $registry:$BUILD_NUMBER"
                    }
                }
                sh 'printenv'
            }

        }
    }
}